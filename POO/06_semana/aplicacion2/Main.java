package semana6.aplicacion2;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        ArrayList<Integer> listaNumeros = new ArrayList<>();
        int opcion = 0; // Variable para almacenar la opci√≥n del men√∫

        // Bucle para mostrar el men√∫ y realizar acciones seg√∫n la opci√≥n selecconada
        do {
            mostrarMenu();
            opcion = obtenerOpcion(sc); //

            if (opcion == 1) {
                agregarNumeros(listaNumeros);
            } else if (opcion == 2) {
                eliminarNumero(listaNumeros, sc);
            } else if (opcion == 3) {
                cambiarNumero(listaNumeros);
            } else if (opcion == 4) {
                mostrarNumeros(listaNumeros);
            } else if (opcion == 5) {
                cerrarAplicacion();
                break;
            }
        } while (true);
    }

    public static void mostrarMenu() {
        System.out.println("====================");
        System.out.println("‚û°Ô∏è 1. Agregar n√∫meros");
        System.out.println("Ô∏èÔ∏è‚û°Ô∏è 2. Eliminar n√∫meros");
        System.out.println("Ô∏è‚û°Ô∏è 3. Cambiar n√∫mero");
        System.out.println("Ô∏è‚û°Ô∏è 4. Mostrar n√∫meros");
        System.out.println("Ô∏è‚û°Ô∏è 5. Salir");
        System.out.println("====================");
    }

    public static int obtenerOpcion(Scanner sc) {
        int opcion = 0;

        do {
            System.out.print("Ô∏èÔ∏è‚û°Ô∏è Ingrese su opci√≥n: ");
            try {
                opcion = sc.nextInt();
                if (opcion < 1 || opcion > 5) System.out.println("[‚ùå] Debes ingresar un n√∫mero entero [1:5]");
            } catch (Exception e) {
                sc.next(); // Limpia el buffer en caso de exepci√≥n
                System.out.println("[‚ùå] Debes ingresar un n√∫mero entero");
            }
        } while (opcion < 1 || opcion > 5); // Repite hasta obtener una opci√≥n v√°lida
        return opcion; // Retorna la opci√≥n v√°lida
    }

    public static void agregarNumeros(List<Integer> lista) {
        System.out.print("‚û°Ô∏è Ingrese la cantidad de n√∫meros que desea a√±adir: ");
        int cantidad = obtenerNumero(); // Obtiene la cantidad de n√∫meros a agregar

        for (int i = 0; i < cantidad; i++) {
            System.out.print("‚û°Ô∏è " + (i + 1) + ". Ingrese un n√∫mero para agregar a la lista: ");
            int numero = obtenerNumero(); // Obtiene el n√∫mero a agregar
            lista.add(numero); // Agrega el n√∫mero a la lista
        }
        // Mensaje de confirmaci√≥n seg√∫n la cantidad de n√∫meros agregados
        System.out.println(
                cantidad > 1 ? "[‚úÖ] N√∫meros agregados correctamente!" : "[‚úÖ] N√∫mero agregado correctamente!"
        );
    }

    public static void eliminarNumero(List<Integer> lista, Scanner sc) {
        //Verifica si la lista contiene elementos antes de eliminar
        if (contieneElementos(lista)) {
            System.out.print("‚û°Ô∏è Ingrese el n√∫mero a eliminar: ");

            int numero = obtenerNumero(); // Obtiene el n√∫mero a eliminar

            // Intenta eliminar el n√∫mero y pide otro si no se encuentra
            while (!lista.remove((Integer) numero)) {
                System.out.println("[‚ùå] N√∫mero no encontrado!");
                System.out.print("[‚û°Ô∏è N√∫meros disponibles: ");
                mostrarNumeros(lista);
                System.out.print("‚û°Ô∏è Ingresa otro n√∫mero: ");
                numero = obtenerNumero(); // Solicita un nuevo n√∫mero
            }
            System.out.println("[‚úÖ] N√∫mero eliminado correctamente!");
        }
    }

    public static void cambiarNumero(List<Integer> lista) {
        // Verifica si la lista contiene elementos antes de cambiar
        if (contieneElementos(lista)) {
            int indice = 0;
            int numero = 0;

            // Bucle para solicitar un √≠ndice v√°lido para cambiar el n√∫mero
            do {
                System.out.print("‚û°Ô∏è Ingrese el √≠ndice [1 - " + lista.size() + "]: ");
                indice = obtenerNumero();
            } while (indice <= 0 || indice > lista.size()); // Verifica que el √≠ndice sea v√°lido
            indice--; // Ajusta el √≠ndice para el acceso a la lista

            System.out.print("‚û°Ô∏è Ingrese el nuevo n√∫mero: ");
            numero = obtenerNumero(); // Obtiene nuevo n√∫mero

            lista.set(indice, numero); // Cambia el n√∫mero en la lista
            System.out.println("[‚úÖ] N√∫mero cambiado correctamente!");
        }
    }

    public static void mostrarNumeros(List<Integer> lista) {
        // Verifica si la lista cntiene elementos antes de mostrarla
        if (contieneElementos(lista)) {
            int count = 0;
            int size = lista.size();

            System.out.println();
            System.out.print("[‚úÖ] N√∫meros en la lista: ");

            for (int numero : lista) {
                System.out.print(numero);
                count++;
                if (count < size) System.out.print(", "); // Formatea la salida
            }
            System.out.println("\n");
        }
    }

    public static boolean contieneElementos(List<Integer> lista) {
        if (lista.isEmpty()) {
            System.out.println("[‚ùå] La lista est√° vac√≠a!");
            return false; // Retorna false si est√° vac√≠a
        } else {
            return true; // Retorna true si no est√° vac√≠a
        }
    }

    public static int obtenerNumero() {
        Scanner sc = new Scanner(System.in);

        int nIngresado = 0;
        do {
            try {
                nIngresado = sc.nextInt();
            } catch (Exception e) {
                System.out.print("[‚ùå] Debes ingresar un n√∫mero entero: ");
                sc.next(); // Limpia el buffer en caso encuentre una exepci√≥n
                continue; // Vuelve a pedir el n√∫mero
            }
            return nIngresado; // Retorna el n√∫mero ingresado
        } while (true); // Repite hasta obtener un n√∫mero v√°lido

    }

    public static void cerrarAplicacion() {
        try {
            System.out.println("‚û°Ô∏è Cerrando el men√∫ en... 3 ");
            // Cuenta regresiva para cerrar la aplicaci√≥n
            for (int i = 2; i > 0; i--) {
                Thread.sleep(1000); // Pausas de 1 segundo
                System.out.println("‚û°Ô∏è Cerrando el men√∫ en... " + i);
            }
        } catch (InterruptedException e) {
            System.out.println("[‚ùå] Error al cerrar el men√∫!");
        }
        System.out.println("[üì¥] Cerrado!");
    }
}